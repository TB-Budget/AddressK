--АдресК - расширение функционала по работе с адресами (c) Златовратский Павел(ТБ.Бюджет), 2014

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class inherited WebTL.XMLRPC_Proxy "";
import TUL classes XMLMapper, XMLMapperNode;
import classes Библио;
inclass
  func BuildingsMapper:XMLMapper;
    var res: XMLMapper;

    res = XMLMapper.Create;
    res.fields[1] = XMLMapperNode.Create;
    res.fields[1].nodename = 'sub';
    res.fields[1].fieldname = 'sub';
    res.fields[1].nodekind = 1;
    res.fields[1].repeatable = True;
    res.fields[1].nodetype = XMLMapper.Create;
    res.fields[1].nodetype.allowreflection = True;
    res.fields[2] = XMLMapperNode.Create;
    res.fields[2].nodename = 'too_much';
    res.fields[2].fieldname = 'too_much';
    res.fields[2].nodekind = 1;
    res.fields[2].nodetype = 4; --varLogical : Integer = 4;  -- Логическое (булево) значение
    res.fields[2].repeatable = False;

    return res;
  end;

  WaitingAsync: WebTL.HTTPAsync;
  func CreateEx(URL: String): ФИАС_XML_RPC;
    Result = inherited CreateEx(URL);
    Result.BldFetch = WebTL.SimpleRestGet.CreateEx('list/', BuildingsMapper);
    Result.GetAreasFunc = WebTL.XMLRPCFunc.CreateEx(URL, "GetAreas", false);
  end;

inobject
  var rest_URL:String;
  var BldFetch: WebTL.SimpleRestGet;
  var GetAreasFunc: WebTL.XMLRPCFunc;

  func GetBuildingProperties(AO_GUID:String;Proplist:Variant):Storage;
    Result = _Execute_single("GetBuildingProperties", [AO_GUID, Proplist]) as Storage;
  end;


  proc PollBuildings(AO_GUID:String);
    var tgt_url:String;
    tgt_url = rest_URL + 'list/' + AO_GUID + '/all_b';
    if WaitingAsync <> nil then --Сброс "чужого" запроса
       if WaitingAsync.id <> tgt_url then
          WaitingAsync.abort;
          WaitingAsync = nil;
       end;
    end;
    if WaitingAsync = nil then --если запрос есть, значит от "наш"
      --BldMapper =  BuildingsMapper;
      --WaitingAsync = XMLRPC.AsyncResult.RestAsync(tgt_url, BldMapper);--, "GET");--, nil, '');
      self.BldFetch.Host = rest_URL + 'list/';
      WaitingAsync = self.BldFetch.Call([AO_GUID + '/all_b']);
    fi;
  end;

  func GetBuildings(AO_GUID:String):Storage[];
    PollBuildings(AO_GUID);
    Result = WaitingAsync.Get.sub as Storage[];
  end;

--  func GetBuildings(AO_GUID:String):Storage[];
--    Result = _Execute_single("GetBuildings", [AO_GUID]) as Storage[];
--  end;

  func GetAreaProperty(AO_GUID:String; Propname:String):Variant;
    Result = _Execute_single("GetAreaProperty", [AO_GUID, Propname]);
  end;

  func GetAreas(filter_by:Storage; Name_like:String=''):Variant;
    Result = _Execute_single("GetAreas", [filter_by, Name_like]);
  end;

  func GetAreasAsync(filter_by:Storage; Name_like:String=''):TUL.AsyncResult;
    return GetAreasFunc.Call([filter_by, Name_like]);
  end;

  func GetSubsAsync(aoguid:String):TUL.AsyncResult;
    self.BldFetch.Host = rest_URL + 'list/';
    return BldFetch.Call([aoguid + '/all']);
  end;

  --Прототип нового API
  --Все функции потенциально имеют право быть асинхронными, используйте TUL.AsyncTools.Ensure
  func SubB(aoguid: String): Variant;
    self.BldFetch.Host = rest_URL + 'list/';
    return BldFetch.Call([aoguid + '/all_b']);
  end;

  func SubO(aoguid: String): Variant;
    self.BldFetch.Host = rest_URL + 'list/';
    return BldFetch.Call([aoguid + '/all']);
  end;

  func BldInfo(aoguid: String; bldguid: String): Variant;
    --aoguid только для совместимости API, в этой версии не работает
    Result = _Execute_single("GetBuildingProperties",
                             [bldguid, ['housenum', 'strucnum', 'buildnum',
                                        'eststatus', 'postalcode', 'okato']]) as Storage;

  end;

  func SearchAO(filter_by: Storage): Variant;
  var Name_like: String;
    if filter_by.FieldExists('name_like') then
       Name_like = filter_by.GetField('name_like');
       filter_by.DeleteField('name_like');
    fi;
    return GetAreasFunc.Call([filter_by, Name_like]);
  end;


  func AOInfo(aoguid: String): Storage;
  var filter_by: Storage;
  var tmp: Variant[];
  var i: Integer;
    filter_by = Storage.Create;
    filter_by.aoguid = aoguid;
    tmp = TUL.AsyncTools.Ensure(SearchAO(filter_by)) as Variant[];
    Result = tmp[1];
    for i = 1 .. LengthOfArray(ПоляФИАС) do
      if Result.FieldExists(ПоляФИАС[i])  then
         Result.SetField(ПоляФИАС[i],
                         _Execute_single("GetAreaProperty", [aoguid, ПоляФИАС[i]]));
      fi;
    od;
    
  end;



end