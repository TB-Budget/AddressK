--АдресК - расширение функционала по работе с адресами (c) Златовратский Павел(ТБ.Бюджет), 2014

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class inherited WebTL.XMLRPC_Proxy "";

  import TUL classes XMLMapper, XMLMapperNode;
  import classes Библио;

  inclass public

  func BuildingsMapper: XMLMapper;
    var res: XMLMapper;
    res = XMLMapper.Create;
    res.fields[1] = XMLMapperNode.Create;
    res.fields[1].nodename = 'sub';
    res.fields[1].fieldname = 'sub';
    res.fields[1].nodekind = 1;
    res.fields[1].repeatable = True;
    res.fields[1].nodetype = XMLMapper.Create;
    res.fields[1].nodetype.allowreflection = True;
    res.fields[2] = XMLMapperNode.Create;
    res.fields[2].nodename = 'too_much';
    res.fields[2].fieldname = 'too_much';
    res.fields[2].nodekind = 1;
    res.fields[2].nodetype = 4; --varLogical : Integer = 4;  -- Логическое (булево) значение
    res.fields[2].repeatable = False;
    return res;
  end;

  WaitingAsync: WebTL.HTTPAsync;

  func CreateEx (URL: String): ФИАС_XML_RPC;
    var Mapper: TUL.XMLMapper;
    var FileObj: AutoObject;
    Result = inherited CreateEx(URL);
    Result.BldFetch = WebTL.SimpleRestGet.CreateEx('list/', BuildingsMapper);
    Result.GetAreasFunc = WebTL.XMLRPCFunc.CreateEx(URL, "GetAreas", false);
    --Загрузка справочника статусов домов
    FileObj = AutoObject.Create("Msxml2.DOMDocument.6.0");
    СИС2.Файл.СинхронизироватьФайлы(BaseInfo.ProjectByName["АдресК"].Folder + "\\Shared\\AS_ESTSTAT.XML",
                                    SessionInfo.LocalFolder + "\\AS_ESTSTAT.XML");
    FileObj.load(SessionInfo.LocalFolder + "\\AS_ESTSTAT.XML");
    Mapper = Библио.EstStatMapper;
    Result.СтатДомов = Mapper.ParseNode(FileObj.documentElement).EstateStatus as Storage[];
    Result.SubCache = Storage.Create;
  end;

inobject public

  var rest_URL:String;
  var BldFetch: WebTL.SimpleRestGet;
  var GetAreasFunc: WebTL.XMLRPCFunc;
  var СтатДомов: Storage[];  --загружаемая при запуске база статусов домов
                             --очень маленькая, поэтому не храним в БД
  var SubCache: Storage;

  proc PollBuildings (AO_GUID: String);
    var tgt_url: String;
    tgt_url = rest_URL + 'list/' + AO_GUID + '/all_b';
    if WaitingAsync <> nil then --Сброс "чужого" запроса
      if (WaitingAsync.id <> tgt_url):
        WaitingAsync.abort;
        WaitingAsync = nil;
      fi;
    fi;
    if (WaitingAsync = nil): --если запрос есть, значит от "наш"
      --BldMapper =  BuildingsMapper;
      --WaitingAsync = XMLRPC.AsyncResult.RestAsync(tgt_url, BldMapper);--, "GET");--, nil, '');
      self.BldFetch.Host = rest_URL + 'list/';
      WaitingAsync = self.BldFetch.Call([AO_GUID + '/all_b']);
    fi;
  end;

  func GetBuildings (AO_GUID: String): Storage[];
    if (AO_GUID=''):
      return [];
    fi;
    PollBuildings(AO_GUID);
    Result = WaitingAsync.Get.sub as Storage[];
  end;

  --Прототип нового API
  --Все функции потенциально имеют право быть асинхронными, используйте TUL.AsyncTools.Ensure
  func SubB (aoguid: String): Variant;
    self.BldFetch.Host = rest_URL + 'list/';
    return BldFetch.Call([aoguid + '/all_b']);
  end;

  func SubO (aoguid: String): Variant;
    if not SubCache.FieldExists(aoguid):
      self.BldFetch.Host = rest_URL + 'list/';
      SubCache.SetField(aoguid, BldFetch.Call([aoguid + '/all']));
    fi;
    Result = SubCache.GetField(aoguid);
    if SubCache.Count > 100 then
      SubCache.DeleteAllFields;
    fi;
  end;

  func BldInfo (aoguid: String; bldguid: String): Variant;
    var j: Integer;
    var par: Variant[];
    --aoguid только для совместимости API, в этой версии не работает
    par[1] = bldguid;
    par[2] = ['housenum', 'strucnum', 'buildnum', 'eststatus', 'postalcode', 'okato'];
    Result = _Execute_single("GetBuildingProperties", par) as Storage;
    --тип дома текстовый
    for j = 1 .. LengthOfArray(СтатДомов) do
      if not (Result.eststatus in ['', nil, 'nil']):
        if СтатДомов[j].ESTSTATID = Int(Result.eststatus):
          Result.SetField('txteststatus', СтатДомов[j].NAME);
        fi;
      fi;
    od;
  end;

  func SearchAO (filter_by: Storage): Variant;
    var Name_like: String;
    var filter_1: Storage;
    var i: Integer;
    Name_like = '';
    filter_1 = Storage.Create;
    for i = 1..filter_by.Count do
      if filter_by.IndexByNumber[i] = "name_like" then
        Name_like = filter_by.ItemsByNumber[i];
      else
        filter_1.SetField(filter_by.IndexByNumber[i], filter_by.ItemsByNumber[i]);
      fi;
    od;
--    if filter_by.FieldExists('name_like') then
--       Name_like = filter_by.GetField('name_like');
--       filter_by.DeleteField('name_like');
--    fi;
    return GetAreasFunc.Call([filter_by, Name_like]);
  end;


  func AOInfo (aoguid: String): Storage;
    var filter_by: Storage;
    var tmp: Variant[];
    var i: Integer;
    filter_by = Storage.Create;
    filter_by.aoguid = aoguid;
    tmp = TUL.AsyncTools.Ensure(SearchAO(filter_by)) as Variant[];
    Result = tmp[1];
    for i = 1 .. LengthOfArray(ПоляФИАС) do
      if not Result.FieldExists(ПоляФИАС[i]):
         Result.SetField(ПоляФИАС[i], _Execute_single("GetAreaProperty", [aoguid, ПоляФИАС[i]]));
      fi;
    od;
  end;

end