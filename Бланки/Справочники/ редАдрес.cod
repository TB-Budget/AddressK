--АдресК - расширение функционала по работе с адресами (c) Златовратский Павел(ТБ.Бюджет), 2014

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

class inherited МашинаРеквизитов.Базовые.редБазовыйДокумент "Адрес субъекта", editor Базовый.Справочники.Адрес;
import classes Библио;
import classes HouseCache;

inobject private

--{{ Свойства

  var фреймТипАдреса: TemplateFrame;
  var фреймСтрокой: TemplateFrame;
  var фреймГлавное: TemplateFrame;
  var фреймТипАдреса2: TemplateFrame;--новый фрейм
  var секПозицииТиповАдресов: TemplateSection;--новая секция
  var секцДомНовое: TemplateSection;
  var секцДомСтарое: TemplateSection;
  var секцСубъект: TemplateSection;

  var ТипАдресаНаим: Базовый.Справочники.ТипАдреса[];
  var ТипАдресаПрименен: logical[];
  var UseFiosm: logical; --глобальный управляющий флаг

  var ФИАС: DynamicObject;  --Объект доступа к ФИАС. Зависит от выбранного "бэкенда".
  var ao_guid: Variant[];  --Идентификаторы адресных элементов строка-гуид или отложенный результат.
  var last_ao_guid: String;
  var hCache: HouseCache;
  var LAGPrefetch: TUL.Promise;
--}}

--{{ Обработчики событий шаблона

  proc шаблон_ПриОткрытии (Create: Logical);
    inherited шаблон_ПриОткрытии(Create);
    ТипАдресаНаим = nil;
    ТипАдресаПрименен = nil;
    ПоказатьТипыАдресов;
    Self.UseFiosm = Библио.UseFiosm;
    if секцДомСтарое <> nil and секцДомНовое <> nil then
      секцДомСтарое.Visible = not Self.UseFiosm;
      секцДомНовое.Visible = Self.UseFiosm;
    fi;
    ФИАС = GetFIASObj;
    hCache = HouseCache.Create;
    with Template.CellByField['Регион_Код'] do
      Enabled = not Self.UseFiosm;
      ReadOnly = Self.UseFiosm;
      OnEnter = if(Self.UseFiosm, '', 'Поле_СтрПриВходе');
    end;
  end;

  proc шаблон_ПриСчитывании;
    var k, j: integer;
    var tmpSt: Storage;
    inherited шаблон_ПриСчитывании;
    if секПозицииТиповАдресов <> nil then
      for k = 1 .. секПозицииТиповАдресов.Count do
        ТипАдресаПрименен[k] = false;
        for j = 1 .. Позиции.Count do
          if (Позиции.Items[j].ТипАдреса = ТипАдресаНаим[k]):
            ТипАдресаПрименен[k] = true;
            Break;
          fi;
        od;
      od;
    fi;
    j = LengthOfArray(УровниФИАС);
    for k = 1 .. j do
      tmpSt = СборУсл(k + 1);
      tmpSt.aolevel = УровниФИАС[k];
      ao_guid[k] = ФИАС.SearchAO(tmpSt);
      if (k > 1) and (ao_guid[k] = ao_guid[k-1]):
        ao_guid[k].abort;
        ao_guid[k] = nil;
      else
        ao_guid[k].postprocess = TUL.ClassMeth.CreateExS("АдресК.Библио.AGfromAreas"); -- Добавляем постобработку чтобы получать ГУИД из списка
      fi;
    od;
    if (LAGPrefetch <> nil):
      LAGPrefetch.abort;
    fi;
    LAGPrefetch = RequestAoGuid;
    LAGPrefetch.then_(TUL.Method.CreateEx(self, 'LAGfromAreas'));
    УстановитьФильтрСубъекта;
  end;
--}}

--{{ Обработчики событий клеток шаблона

  func Поле_СтрПриОбзоре (Cell: TemplateCell; Value: Variant; var NewValue: Variant) :Logical;
    var filter_by:Storage;
    var l, i, ii: Integer;
    var tmp: Variant;
    var tmpGuid: String;
    if Self.UseFiosm:
      l = SearchInArray(ПрефПолей, ExtractWord(Cell.Contents, 1, "_"));
      tmp = nil;
      -- Надо найти предыдущий ненулевой элемент
      ii = l;
      tmpGuid = '';
      for i = (ii - 1) .. 1 step -1 do
        if ao_guid[i] <> nil:
          if ao_guid[i] is TUL.AsyncResult:
            ao_guid[i] = ao_guid[i].Get;
          fi;
          tmpGuid = ao_guid[i];
          Break;
        fi;
      od;
      if (l = 1):
        tmpGuid = 'None';
      fi;
      -- Если есть ГУИД - запрашиваем детей
      if (tmpGuid <> nil):
        tmp = TUL.AsyncTools.Ensure(ФИАС.SubO(tmpGuid));
        -- Доп.проверка too_much
        if (tmp is Storage) and tmp.FieldExist('too_much') and tmp.too_much:
          tmp = '';
        fi;
        -- Вытаскивание массива
        if (tmp is Storage) and tmp.FieldExist('sub'):
          tmp = tmp.sub;
        fi;
        if (varType(tmp) = 8): -- Тут еще может быть строка с ошибкой
          tmp = TUL.FuncTools.Filter(TUL.EvalObject.New('aolevel = "'+Str(УровниФИАС[l])+'"'), tmp as Object[]);
        elsif (varType(tmp) <> 1): -- А если тут не строка, то похоже пришел какой-то мусор
          tmp = nil;
        fi;
      fi;
      --
      if (tmp = nil):
        -- Если с кэшем не срослось - запрашиваем из базы
        filter_by = СборУсл(l);
        filter_by.aolevel = УровниФИАС[l];
        tmp = TUL.AsyncTools.Ensure(ФИАС.SearchAO(filter_by));
      fi;
      if (VarType(tmp) = varString):
        Message(tmp);
        return False;
      else
        tmp = SelectFiasAO(tmp as Storage[]);
        if (tmp = False):
          return False;
        else
          tmp = tmp as Storage;
          Template.endEdit(False);
          NewValue = SaveLevel(tmp);
          UpdGlobal(tmp);
          FIAS_check(l);
        fi;
      fi;
      Result = False;
    else
      Result = true;
    fi;
  end;

  func Поле_СтрПриВходе (Cell: TemplateCell; Index: Integer; Action: Template.EnterTypes): Logical;
    var locRecord: Record;
    if (Cell.Contents = 'Регион_Код') and (Action <> Template.Clear):
      if CmOk = OpenCardFile('Базовый.Классификаторы.картКладр', locRecord, 'Уровень=1', Window.ModalWindow):
        Регион_Стр = locRecord.GetField('Имя');
        Регион_Код = SubStr(locRecord.GetField('Код'), 1, 2);
        Регион_Элемент = locRecord.GetField('Сокращение');
        Template.EndEdit;
      fi;
    elsif (Cell.Contents = 'Регион_Код') and (Action = Template.Clear):
      Регион_Стр = nil;
      Регион_Код = nil;
      Регион_Элемент = nil;
    fi;
  end;

  func Поле_СтрПриПроверке (Cell: TemplateCell; Index: Integer; var Value: Variant): Logical;
    var filter_by: Storage;
    var l: Integer;
    var tmp: Variant;
    var tmpa: Storage[];
    if Self.UseFiosm:
      l = SearchInArray(ПрефПолей, ExtractWord(Cell.Contents, 1, "_"));
      if (Value = ""): -- Delete
        FIAS_check(l-1);
        UpdGlobal(nil);
        return True; -- Ручной ввод
      fi;
      if (Record.GetField(Cell.Contents) = Value):
        return True;  --Ничего не изменилось
      fi;
      filter_by = СборУсл(l);
      filter_by.aolevel = УровниФИАС[l];
      filter_by.name_like = '%'+Value+'%';
      tmp = TUL.AsyncTools.Ensure(ФИАС.SearchAO(filter_by));
      if (VarType(tmp) = varString):
        Message(tmp);
        return False;
      else
        tmpa = tmp as Storage[];
        if (LengthOfArray(tmpa) = 0):
          FIAS_check(l-1); -- -1 чтобы обнулить свой уровень
          UpdGlobal(nil);
          return True; -- Ручной ввод
        elsif (LengthOfArray(tmpa) = 1):
          tmp = tmpa[1];
        else
          tmp = SelectFiasAO(tmpa);
        fi;
        if (tmp = False):
          FIAS_check(l);
          UpdGlobal(nil);
          return True; -- Ручной ввод
        else
          tmp = tmp as Storage;
          Value = SaveLevel(tmp);
          UpdGlobal(tmp);
          FIAS_check(l);
        fi;
      fi;
    else
      if (Cell.Value <> Value):
        if    (Cell.Contents = 'Регион_Стр'): Регион_Код = nil;
        elsif (Cell.Contents = 'Округ'):      Округ_Код = nil;
        elsif (Cell.Contents = 'Район'):      Район_Код = nil;
        elsif (Cell.Contents = 'Город'):      Город_Код = nil;
        elsif (Cell.Contents = 'Терр'):       Терр_Код = nil;
        elsif (Cell.Contents = 'НасПункт'):   НасПункт_Код = nil;
        elsif (Cell.Contents = 'Улица'):      Улица_Код = nil;
        elsif (Cell.Contents = 'ДопТерр'):    ДопТерр_Код = nil;
        elsif (Cell.Contents = 'ДопАЭ'):      ДопАЭ_Код = nil;
        fi;
      fi;
    fi;
    Result = True; -- Разрешаем сохранить изменения в поле
  end;

  func ПолеДатаАкт_ПриПроверке (Cell: TemplateCell; Index: Integer; var Value: Variant): Logical;
    Result  = true;
    if (Cell.Contents = 'Дата'):
      if (Value > ДатаОкончания) and (ДатаОкончания <> nil):
        Message('Дата начала не может быть позже, чем дата окончания!');
        Result  = false;
      fi;
    elsif (Cell.Contents = 'ДатаОкончания'):
      if (Дата > Value) and (Value <> nil) and (Дата <> nil):
        Message('Дата начала не может быть позже, чем дата окончания!');
        Result  = false;
      fi;
    fi;
  end;

  proc Поле_СокрПриВыходе (Cell: TemplateCell; Index :Integer); -- Обработка события выхода из редактируемого поля
    var i: Integer;
    i = SearchInArray(ПрефПолей, ExtractWord(Cell.Contents, 1, "_"));
    Record.SetField(ПрефПолей[i] + "_Стат", ""); -- Обнуление расшифрованной статусной части при ручном заполнении сокращения
  end;

  proc Поле_ТипАдресаПриВыходе (Cell: TemplateCell; Index: Integer);
    var j, jj: integer;
    jj = Позиции.Count;
    if (Cell.Value = false):
      for j = 1 .. jj do
        if (Позиции.Items[j].ТипАдреса = ТипАдресаНаим[Index]):
          Позиции.Delete(j);
          Break;
        fi;
      od;
    else
      j = jj + 1;
      Позиции.Insert(j);
      Позиции.Items[j].ТипАдреса = ТипАдресаНаим[Index];
    fi;
  end;

  func ПолеДом_ПриВходе (Cell: TemplateCell; Index: Integer; Action: Template.EnterTypes): Logical;
    Return true;
  end;

  func ПолеДом_ПриОбзоре (Cell: TemplateCell; Value: Variant; var NewValue: Variant): Logical;
    Return true;
  end;

  proc ПолеДом_ПриВыходе (Cell: TemplateCell; Index: Integer);
  end;

  func ПолеДом_стрПриВходе (Cell: TemplateCell; Index: Integer; Action: Template.EnterTypes): Logical;
    var pairs: String[2];
    var i, ii: Integer;
    pairs = hCache.gethouses(LastAoGuid);
    ii = LengthOfArray(pairs[1]);
    Cell.List.Clear;
    for i = 1 .. ii do
      Cell.List.Add(pairs[1, i] + "|");
    od;
    Cell.List.Sort;
    Result = True; -- Разрешаем войти в поле
  end;

  proc ПолеДом_стрПриВыходе (Cell: TemplateCell; Index: Integer);
    var tmp: Storage;
    var pairs: String[2];
    var i: Integer;
    pairs = hCache.gethouses(LastAoGuid);
    i = SearchInArray(pairs[1], Cell.Value);
    if (i > 0):
      tmp = ФИАС.BldInfo('', pairs[2, i]);
      Record.Дом_Н = tmp.housenum;
      Record.Дом_К = tmp.buildnum;
      Record.Дом_С = tmp.strucnum;
      Record.Индекс = tmp.postalcode;
      Record.ОКАТО = tmp.okato;
      --тип дома
      Дом_Элемент = ЭлементСтат(tmp.txteststatus, tmp.txteststatus, 6);
      --Поля для совместимости
      Record.Корпус = Record.Дом_К;
      Record.Дом = Record.Дом_Н;
      if (Record.Дом_С <> nil):
        if (Record.Корпус = nil):
          Record.Дом = Record.Дом + ' c.' + Record.Дом_С;
        else
          Record.Корпус = Record.Корпус + ' c.' + Record.Дом_С;
        fi;
      fi;
    else
      Record.Дом_Н = Cell.Value;
      Record.Дом_К = "";
      Record.Дом_С = "";
      -- Поля для совместимости
      Record.Дом = Cell.Value;
      Record.Корпус = "";
    fi;
  end;

  func АвтоАдрес_Общее_ПриНажатии(Cell: TemplateCell; Action: Template.ClickTypes): Logical;
    Адрес_Строкой = Базовый.Справочники.интАдрес.Адрес_Общий(Record);
    Result = True; -- Разрешаем стандартную обработку
  end;

  proc Поле_ПриРисовании (Cell: TemplateCell; Selected: Logical; var Color: Integer; var FieldColor: Integer; Font: Font);
    var locStyle: TemplateStyle;
    if (Cell.Contents = 'Регион_Код'):
      if Cell.Enabled:
        locStyle = СтильПоИмени('Поле выбора');
      else
        locStyle = СтильПоИмени('Поле вывода');
      fi;
      Color = locStyle.Color;
      FieldColor = locStyle.FieldColor;
      Font.Color = locStyle.Font.Color;
      if Selected:
        Color = СИС2.Константы.COLOR_HIGHLIGHT;
      fi;
    fi;
  end;
--}}

--{{ Вспомогательные методы

  func RequestAoGuid: TUL.Promise;
    var n, i, ii: Integer;
    var tmp: Variant;
    var filter_by:Storage;
    ii = LengthofArray(ПрефПолей);
    --вычисление нижнего заполненного уровня
    for i = ii .. 1 step -1 do
      tmp = Record.GetField(ПрефПолей[i] + '_Код');
      if (tmp = ''):
        tmp = 0;
      fi;
      if (Int(tmp) <> 0):
        n = i;
        Break;
      fi;
    od;
    filter_by = СборУсл(n + 1); --А вот это не шибко правильно!
    if (n = 0):
      filter_by.parentid = 0;
    else
      filter_by.aolevel = УровниФИАС[n];
    fi;
    return ФИАС.SearchAO(filter_by);
  end;

  func LastAoGuid: String;
    if (last_ao_guid = "") and (Регион_Стр<>''):
      LAGfromAreas(RequestAoGuid.Get as Storage[]);
    fi;
    return self.last_ao_guid;
  end;

  proc LAGfromAreas (Areas: Variant);
    var tmpa: Storage[];
    var tmp: Storage;
    if (not (varType(Areas) = varString) and (Areas = 'Too big list')):
      tmpa = Areas as Storage[];
      if (LengthOfArray(tmpa) > 0):
        tmp = tmpa[1];
        SetLastAoGuid(tmp.aoguid);
      else
        SetLastAoGuid('');
      fi;
    fi;
  end;

  proc SetLastAoGuid (aoguid: String);
    if (LAGPrefetch <> nil):
      LAGPrefetch.abort;
      LAGPrefetch = nil;
    fi;
    if (aoguid <> ''):
      ФИАС.PollBuildings(aoguid);
    fi;
    last_ao_guid = aoguid;
  end;

  func SaveLevel (AO: Storage): String;
     var prefix: String;
     var l: Integer;
     var tmp: Variant;
     -- проверяем - если получено из REST-списка, надо получить объект заново.
     if AO.FieldExist('guid'):
       AO = ФИАС.AOInfo(AO.guid);
     else
       AO = ФИАС.AOInfo(AO.aoguid);
     fi;
     l = SearchInArray(УровниФИАС, AO.aolevel);
     prefix = ПрефПолей[l];
     if (l <> 1):
       Record.SetField(prefix, AO.formalname);
     else
       Record.SetField(prefix + "_Стр", AO.formalname);
     fi;
     result = AO.formalname;
     Record.SetField(prefix + "_Код", AO.GetField(ПоляФИАС[l]));
     ao_guid[l] = AO.aoguid;
     tmp = ФИАС.SubO(AO.aoguid); --это для кэширования
     if (УровниКЛАДР[l] = -1):
       Record.SetField(prefix + "_Сокр", AO.shortname);
       Record.SetField(prefix + "_Стат", AO.fullname);
     else
       if (Lo(prefix) = "наспункт"):
         Record.Пункт_Элемент = ЭлементСтат(AO.shortname, AO.fullname, УровниКЛАДР[l]);
       else
         Record.SetField(prefix + "_Элемент",ЭлементСтат(AO.shortname, AO.fullname, УровниКЛАДР[l]));
       fi;
     fi;
  end;

  proc UpdGlobal (AO: Storage);
    if (AO = nil):
      Код_Кладр = "";
      ОКАТО = "";
      Индекс = "";
      SetLastAoGuid("");
    else
      Код_Кладр = AO.code;
      ОКАТО = AO.okato;
      Индекс = AO.postalcode;
      SetLastAoGuid(AO.aoguid);
    fi;
  end;

  proc ClearLevel (AOlevel: Integer);
    var prefix: String;
    var l: Integer;
    l = SearchInArray(УровниФИАС, AOlevel);
    prefix = ПрефПолей[l];
    try
      Record.SetField(prefix, "");
    except
      Record.SetField(prefix + "_Стр", "");
    end;
    Record.SetField(prefix + "_Код", "");
    ao_guid[l] = nil;
    if (УровниКЛАДР[l] = -1):
      Record.SetField(prefix + "_Сокр", "");
      Record.SetField(prefix + "_Стат", "");
    else
      if (Lo(prefix) = "наспункт"):
        Record.Пункт_Элемент = nil;
      else
        Record.SetField(prefix + "_Элемент",nil);
      fi;
    fi;
  end;

  func СборУсл (l: Integer): Storage; -- Сбор условия на КЛАДЭ в хранилище для запроса в базу ФИАС
    var res: Storage;
    var i: Integer;
    var tmp: String;
    res = Storage.Create;
    for i = 1 .. (l - 1) do
      tmp = Record.GetField(ПрефПолей[i] + '_Код');
      if (tmp = nil):
        res.SetField(ПоляФИАС[i], RepStr('0', РазмерКода[i]));
      else
        res.SetField(ПоляФИАС[i], tmp);
      fi;
    od;
    Result = res;
  end;

  func SelectFiasAO (ao_list: Storage[]): Variant;
    var i, ii: Integer;
    var str_list: String[];
    var one: Storage;
    ii = LengthOfArray(ao_list);
    if (ii = 0):
      Message("Не найдено адресных элементов");
      return False;
    fi;
    for i = 1 .. ii do
      one = ao_list[i] as Storage;
      str_list[i] = one.name;
    od;
    i = Alternate("Выбор элемента адресации", str_list);
    if (i <> 0):
      Result = ao_list[i];
    else
      Result = false;
    fi;
  end;

  proc FIAS_check (l: Integer);  -- Пост-обработка для выбора уровня: пустые коды предшественников устанавливаются в нули, низлежащие уровни обнуляются
    var i: Integer;
    for i = 1 .. (l - 1) do
      if (Record.GetField(ПрефПолей[i] + '_Код') = nil):
        Record.SetField(ПрефПолей[i] + "_Код", RepStr('0', РазмерКода[i]));
      fi;
    od;
    for i = l + 1 .. LengthOfArray(УровниФИАС) do
      ClearLevel(УровниФИАС[i]);
    od;
  end;

  proc ПоказатьТипыАдресов;
    ТипАдресаНаим = nil;
    with Query.Create([Базовый.Справочники.ТипАдреса]) do
      Order = 'Номер';
      if Субъект.ФизическоеЛицо or Субъект.Сотрудник then
        Filter = 'ДляФизлиц';
      elsif Субъект.Контрагент and Субъект.ТипКонтрагента = 0 then
        Filter = 'ДляКонтрагентов';
      fi;
      Select;
      while not Eof do
        СИС2.Функции.AddInArray(ТипАдресаНаим, Current, true);
        Next;
      end;
      секПозицииТиповАдресов.Count = Count;
    end;
  end;

  proc УстановитьФильтрСубъекта;
    var Filter: String;
    if Субъект.ФизическоеЛицо then
      Filter = 'ФизическоеЛицо';
    elsif Субъект.Контрагент then
      Filter = 'Контрагент';
    fi;
    секцСубъект.CellByField["Субъект.Имя"].LookupFilter=Filter;
  end;
--}}

end